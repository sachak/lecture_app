# -*- coding: utf-8 -*-
import uuid
import pandas as pd
import streamlit as st

# -------- CONFIG G√âN√âRALE ----------------------------------------------------
st.set_page_config(page_title="√âvaluation Lecture/√âcriture ‚Äì Module 1",
                   page_icon="üìù", layout="centered")

# -------- INIT SESSION_STATE -------------------------------------------------
if "page" not in st.session_state:
    st.session_state.page = 0
if "infos" not in st.session_state:
    st.session_state.infos = {}
if "rep" not in st.session_state:
    st.session_state.rep = {}

# -------- OUTILS -------------------------------------------------------------
def next_page():
    st.session_state.page += 1
    st.experimental_rerun()

def btn_suivant(ok: bool, label="Suivant ‚û°Ô∏è"):
    st.button(label, disabled=not ok, on_click=next_page,
              key=f"btn_{st.session_state.page}")

# -------- PAGE 0  : INFOS ----------------------------------------------------
def page_infos():
    st.title("üìù √âvaluation Lecture / √âcriture ‚Äì Module 1")
    st.subheader("Informations g√©n√©rales")

    pid = st.text_input("Identifiant (laisser vide pour auto-g√©n√©ration)")
    if not pid.strip():
        pid = str(uuid.uuid4())

    age  = st.number_input("√Çge (ann√©es)", 16, 99, 25, 1)
    sexe = st.radio("Sexe", ["Femme", "Homme", "Autre"], horizontal=True)
    niv  = st.selectbox("Niveau d‚Äô√©tude",
                        ["Coll√®ge", "Lyc√©e", "Baccalaur√©at", "Bac +2",
                         "Licence / Master", "Doctorat", "Autre"])
    st.session_state.infos = dict(participant_id=pid, age=age, sexe=sexe, etude=niv)

    st.markdown("---")
    btn_suivant(True)

# -------- PAGE 1  : QCM 1 ----------------------------------------------------
def page_qcm1():
    st.header("Test 1 ‚Äì Vocabulaire")
    st.write("Synonyme le plus proche de **imp√©tueux**")
    choix = st.radio("Votre r√©ponse :",
                     ["Calme", "Fougueux", "Timide", "Lent"],
                     index=None, key="q1")
    if choix:
        st.session_state.rep["imp√©tueux"] = choix
    st.markdown("---")
    btn_suivant(choix is not None)

# -------- PAGE 2  : QCM 2 ----------------------------------------------------
def page_qcm2():
    st.header("Test 2 ‚Äì Vocabulaire")
    st.write("Synonyme le plus proche de **hirsute**")
    choix = st.radio("Votre r√©ponse :",
                     ["√âbouriff√©", "Lisse", "Propre", "Ras√©"],
                     index=None, key="q2")
    if choix:
        st.session_state.rep["hirsute"] = choix
    st.markdown("---")
    btn_suivant(choix is not None, label="Terminer ‚úÖ")

# -------- PAGE 3  : SYNTH√àSE + CSV (1 ligne) ---------------------------------
def page_fin():
    st.header("üéâ Merci pour votre participation !")

    # donn√©es sur une seule ligne (pas d‚Äôen-t√™te)
    ligne = {**st.session_state.infos, **st.session_state.rep}
    df = pd.DataFrame([ligne])
    csv_text = df.to_csv(index=False, header=False, sep=';',
                         encoding='utf-8-sig')

    st.subheader("R√©capitulatif")
    st.dataframe(df)

    st.download_button("üì• T√©l√©charger (CSV 1 ligne)",
                       data=csv_text,
                       file_name=f"{ligne['participant_id']}_module1.csv",
                       mime="text/csv")
    st.success("Fichier pr√™t ‚Äì vous pouvez fermer l‚Äôonglet.")

# -------- ROUTAGE ------------------------------------------------------------
PAGES = {0: page_infos, 1: page_qcm1, 2: page_qcm2, 3: page_fin}
PAGES.get(st.session_state.page, page_infos)()
